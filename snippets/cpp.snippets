# #include <...>
snippet inc
	#include <${1:iostream}>
# namespace
snippet names
    namespace ${1:`UltiSnips#Filename('', 'my')`} {
        ${0}
    } // close namespace $1
# main function
snippet main
    int main(int argc, char *argv[]) {
        ${0}

        return 0;
    }
# std::cout
snippet cout
    std::cout << ${1} << std::endl;
# std::cin
snippet cin
    std::cin >> ${1};
# std::array
snippet array
	std::array<${1:T}, ${2:N}> ${3};
# std::deque
snippet deque
    std::deque<${1:T}> ${2};
# std::forward_list
snippet forward_list
    std::forward_list<${1:T}> ${2};
# std::list
snippet list
    std::list<${1:T}> ${2};
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
# std::multimap
snippet multimap
	std::multimap<${1:Key}, ${2:T}> ${3};
# std::multiset
snippet multiset
	std::multiset<${1:T}> ${2};
# std::priority_queue
snippet priority_queue
	std::priority_queue<${1:T}> ${2};
# std::queue
snippet queue
	std::queue<${1:T}> ${2};
# std::set
snippet set
	std::set<${1:T}> ${2};
# std::stack
snippet stack
	std::stack<${1:T}> ${2};
# std::unordered_map
snippet unordered_map
	std::unordered_map<${1:Key}, ${2:T}> ${3};
# std::unordered_set
snippet unordered_set
	std::unordered_set<${1:T}> ${2};
# std::unordered_multimap
snippet unordered_multimap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
# std::unordered_multiset
snippet unordered_multiset
	std::unordered_multiset<${1:T}> ${2};
# std::vector
snippet vector
	std::vector<${1:T}> ${2};
# class
snippet class
	class ${1:`UltiSnips#Filename('$1', 'name')`}
	{
	public:
		$1(${2});
		~$1();

	private:
		${0:/* data */}
	};
# member function implementation
snippet mfun
	${4:void} ${1:`UltiSnips#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
# for i
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}
# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}
# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
# static
snippet static_cast
    static_cast<${1:unsigned}>(${2:expr})${3}
# dynamic
snippet dynamic_cast
    dynamic_cast<${1:unsigned}>(${2:expr})${3}
# reinterpret_cast
snippet reinterpret_cast
    reinterpret_cast<${1:unsigned}>(${2:expr})${3}
# const
snippet const_cast
    const_cast<${1:unsigned}>(${2:expr})${3}
